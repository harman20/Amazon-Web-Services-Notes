Welcome back, Blaine here, and
it's time to talk databases. Now, databases are one of the most
important parts of any application. There's many ways you can do it in AWS. I want to start a conversation
on databases though by taking a look at life before AWS. So as we come here to my chart,
there's a whole lot of different functions that exist
when running your own database. So if I was in an on-premises world,
I would be responsible for everything from power and heating and
cooling, racking and stacking the servers, maintaining the servers, so on,
all the way up to the application itself. One of the great things about AWS is by
simply moving your database onto EC2, a large section of what you
would have to do on-premises, you don't have to worry about in AWS. You don't have to worry about provisioning
the hardware as far as racking and stacking it, maintaining the server. Even installing the operating
system is taken care of by simply running your system on EC2. What if there was a way
to make it even simpler? Introducing the Amazon Relational
Database Service, or RDS. At RDS, you still run a relational
database of the flavor of your choosing, whether you're talking about a MySQL
database, an Oracle database, a PostgreSQL database, or other flavors. But the difference is instead of taking
care of the patching and the installs and installing the database itself,
AWS takes care of all of the rest of the heavy lifting that otherwise
your DBA would be in charge of. So no longer does she have to worry
about managing the high availability, or managing backups, or
taking care of scaling. But all of these pieces
now get taken care of because of
the Relational Database Service. And the only thing that your
DBA needs to worry about is taking care of the application itself. So she still is in charge of getting
the right schema, getting charge of the data that's in there, and
she is 100% responsible for that. Whether it's encrypted, who has access
to it, AWS has no access to the data. But all of the rest of the
undifferentiated heavy lifting that goes into databases, AWS takes care of. Is RDS the perfect solution for everyone? You certainly may be in a case where
you're using a legacy database. Say you're still running a Sybase shop,
you'll still run that on EC2. But as you look for
ways to eliminate tasks from your team and let them focus on what they really prepare
to do, RDS can certainly get rid of large portions that they don't
have to worry about anymore.